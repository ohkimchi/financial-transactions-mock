{"version":3,"sources":["App/AppReducer.ts","App/App.tsx","utils/utils.ts","serviceWorker.ts","index.tsx"],"names":["AppActionType","initialState","allTransactionsData","targetTransaction","AppContext","createContext","AppReducer","state","action","type","SET_ALL_TRANSACTIONS_DATA","SET_TARGET_TRANSACTION","TransactionDivWrapper","styled","div","TransactionDiv","StateDiv","StateSpan","span","RefundButton","button","App","useReducer","dispatch","updateTransactionState","transaction","console","log","updatedEntry","entryPos","findIndex","ele","JSON","stringify","allTransactionsDataTemp","refundOneTran","useEffect","a","async","fetch","then","res","json","resObj","items","updatedItems","map","item","id","created","updated","amount","currency","contactName","initiatorDetails","getAllTransactionsData","Provider","value","className","trans","i","key","Object","entries","entry","j","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wMAEYA,E,uFAAAA,K,sDAAAA,E,iDAAAA,M,KAoBL,IAAMC,EAAe,CAC1BC,oBAAqB,KACrBC,kBAAmB,MAQRC,EAAaC,wBAAc,IAEjC,SAASC,EAAWC,EAAYC,GACrC,OAAQA,EAAOC,MACb,KAAKT,EAAcU,0BACjB,OAAO,eACFH,EADL,CAEEL,oBAAqBM,EAAON,sBAEhC,KAAKF,EAAcW,uBACjB,OAAO,eACFJ,EADL,CAEEJ,kBAAmBK,EAAOL,oBAE9B,QACE,OAAOI,G,kiBCzCb,IAAMK,EAAwBC,IAAOC,IAAV,KAIrBC,EAAiBF,IAAOC,IAAV,KAKdE,EAAWH,IAAOC,IAAV,KAIRG,EAAYJ,IAAOK,KAAV,KAITC,EAAeN,IAAOO,OAAV,KAqDHC,EAhDH,WAAO,IAAD,EACUC,qBAAWhB,EAAYL,GADjC,mBACTM,EADS,KACFgB,EADE,KAERrB,EAAwBK,EAAxBL,oBAMR,SAASsB,EAAuBC,GAC9BC,QAAQC,IAAI,sBAAuBzB,GACnC,IAAM0B,ECFH,SAAuBH,EAAkBvB,GAC9C,IAEM2B,EAAW3B,EAAoB4B,WAFZ,SAACC,GAAD,OACvBC,KAAKC,UAAUF,KAASC,KAAKC,UAAUR,MAEnCS,EAA0BhC,EAE1B0B,EAAY,eACbH,EADa,CAEhBlB,MAAO,aAGT,OADA2B,EAAwBL,GAAYD,EAC7BM,EDTgBC,CAAcV,EAAavB,GAChDqB,EAAS,CACPrB,oBAAqB0B,EACrBnB,KAAMT,EAAcU,4BAIxB,OAbA0B,qBAAU,YC9B0B,SAAOb,GAAP,EAAAc,EAAAC,OAAA,kEAAAD,EAAA,MAC9BE,MAAM,gDAAgDC,MAC1D,SAAOC,GAAP,mBAAAJ,EAAAC,OAAA,kEAAAD,EAAA,MACuBI,EAAIC,QAD3B,OACQC,EADR,OAEUC,EAAUD,EAAVC,MACFC,EAAeD,EAAME,KAAI,SAACC,GAW9B,MAAO,CACLC,GAHED,EAPFC,GAWAC,QAJEF,EANFE,QAWAC,QALEH,EALFG,QAWAC,OANEJ,EAJFI,OAWAC,SAPEL,EAHFK,SAWA7C,MAREwC,EAFFxC,MAWA8C,YATEN,EADFO,iBAEMD,gBAWV9B,EAAS,CACPrB,oBAAqB2C,EACrBpC,KAAMT,EAAcU,4BA1BxB,yCAFkC,qCD+BlC6C,CAAuBhC,KACtB,IAYD,kBAACnB,EAAWoD,SAAZ,CAAqBC,MAAQ,CAAElD,QAAOgB,aACpC,yBAAKmC,UAAU,OACXxD,GAAuBA,EAAoB4C,KAAI,SAACa,EAAYC,GAC5D,OACE,kBAAChD,EAAD,CAAuBiD,IAAG,sBAAkBD,IAC1C,kBAAC7C,EAAD,KACI+C,OAAOC,QAAQJ,GAAOb,KAAI,SAACkB,EAAYC,GACvC,MAAqB,UAAbD,EAAM,GACV,kBAAChD,EAAD,CAAU6C,IAAG,sBAAkBD,EAAlB,kBAA6BK,IAC1C,kBAAChD,EAAD,eAAgB+C,EAAM,GAAtB,aAA6BA,EAAM,GAAnC,MAEe,aAAbA,EAAM,IACF,kBAAC7C,EAAD,CACF+C,QAAU,kBAAM1C,EAAuBmC,KADrC,WAKN,yBAAKE,IAAG,sBAAkBD,EAAlB,kBAA6BK,IAArC,UAAgDD,EAAM,GAAtD,aAA6DA,EAAM,gB,MEnDrEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAACuC,GAClCA,EAAaC,kB","file":"static/js/main.085e3b60.chunk.js","sourcesContent":["import { createContext, Dispatch } from 'react'\n\nexport enum AppActionType {\n  SET_ALL_TRANSACTIONS_DATA = 'SET_ALL_TRANSACTIONS_DATA',\n  SET_TARGET_TRANSACTION = 'SET_TARGET_TRANSACTION'\n}\nexport interface ITransactionObj {\n  id: string\n  created: string\n  updated: string\n  amount: number\n  currency: string\n  state: string\n  contactName: string\n}\n\nexport interface IAppAction {\n  allTransactionsData?: any\n  targetTransaction?: ITransactionObj\n  type: AppActionType\n}\n\nexport const initialState = {\n  allTransactionsData: null,\n  targetTransaction: null\n}\n\ninterface IContextProps {\n  state: typeof initialState\n  dispatch: Dispatch<IAppAction>\n}\n\nexport const AppContext = createContext({} as IContextProps)\n\nexport function AppReducer(state: any, action: IAppAction) {\n  switch (action.type) {\n    case AppActionType.SET_ALL_TRANSACTIONS_DATA:\n      return {\n        ...state,\n        allTransactionsData: action.allTransactionsData\n      }\n    case AppActionType.SET_TARGET_TRANSACTION:\n      return {\n        ...state,\n        targetTransaction: action.targetTransaction\n      }\n    default:\n      return state\n  }\n}\n","import React, { useEffect, useReducer } from 'react'\nimport styled from 'styled-components'\nimport { getAllTransactionsData, refundOneTran } from '../utils/utils'\nimport './App.css'\nimport { AppActionType, AppContext, AppReducer, initialState } from './AppReducer'\n\nconst TransactionDivWrapper = styled.div`\n  padding: 5px;\n  background: white;\n`\nconst TransactionDiv = styled.div`\n  margin: 5px;\n  background: lightgrey;\n`\n\nconst StateDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\nconst StateSpan = styled.span`\n  color: blue;\n`\n\nconst RefundButton = styled.button`\n  color: red;\n  font-size: 16px;\n`\n\nconst App = () => {\n  const [state, dispatch] = useReducer(AppReducer, initialState)\n  const { allTransactionsData } = state\n\n  useEffect(() => {\n    getAllTransactionsData(dispatch)\n  }, [])\n\n  function updateTransactionState(transaction: any) {\n    console.log('allTransactionsData', allTransactionsData)\n    const updatedEntry = refundOneTran(transaction, allTransactionsData)\n    dispatch({\n      allTransactionsData: updatedEntry,\n      type: AppActionType.SET_ALL_TRANSACTIONS_DATA\n    })\n  }\n\n  return (\n    <AppContext.Provider value={ { state, dispatch } }>\n      <div className='App'>\n        { allTransactionsData && allTransactionsData.map((trans: any, i: number) => {\n          return (\n            <TransactionDivWrapper key={ `transaction-${i}` }>\n              <TransactionDiv>\n                { Object.entries(trans).map((entry: any, j: number) => {\n                  return (entry[0] === 'state'\n                    ? <StateDiv key={ `transaction-${i}-entry-${j}` }>\n                      <StateSpan>{ `${entry[0]}: ${entry[1]} ` }</StateSpan>\n                      {\n                        entry[1] !== 'REFUNDED'\n                        && (<RefundButton\n                          onClick={ () => updateTransactionState(trans) }\n                        >REFUND</RefundButton>)\n                      }\n                    </StateDiv>\n                    : <div key={ `transaction-${i}-entry-${j}` }>{ `${entry[0]}: ${entry[1]}` }</div>)\n                }) }\n              </TransactionDiv>\n            </TransactionDivWrapper>\n\n          )\n        }) }\n      </div>\n    </AppContext.Provider>\n\n  )\n}\n\nexport default App\n","import { AppActionType } from '../App/AppReducer'\n\nexport const getAllTransactionsData = async (dispatch: any) => {\n  await fetch('http://localhost:3000/getAllTransactionsData').then(\n    async (res: any) => {\n      const resObj = await res.json()\n      const { items } = resObj\n      const updatedItems = items.map((item: any) => {\n        const {\n          id,\n          created,\n          updated,\n          amount,\n          currency,\n          state,\n          initiatorDetails\n        } = item\n        const { contactName } = initiatorDetails\n        return {\n          id,\n          created,\n          updated,\n          amount,\n          currency,\n          state,\n          contactName\n        }\n      })\n      dispatch({\n        allTransactionsData: updatedItems,\n        type: AppActionType.SET_ALL_TRANSACTIONS_DATA\n      })\n    }\n  )\n}\n\nexport function refundOneTran(transaction: any, allTransactionsData: any[]) {\n  const checkObjectEqual = (ele: any) =>\n    JSON.stringify(ele) === JSON.stringify(transaction)\n  const entryPos = allTransactionsData.findIndex(checkObjectEqual)\n  const allTransactionsDataTemp = allTransactionsData\n\n  const updatedEntry = {\n    ...transaction,\n    state: 'REFUNDED'\n  }\n  allTransactionsDataTemp[entryPos] = updatedEntry\n  return allTransactionsDataTemp\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App/App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}